@page "/shows"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LiveTVAdmin.Shared
@attribute [Authorize]
@inject HttpClient Http

<h1>Series</h1>

<p>Create, updated, or delete Series.</p>

@if (shows == null)
{
    <p><em>Loading...</em></p>
}
else

{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Url</th>
                <th>Description</th>
                <th>Thumbnail Url</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var show in shows)
            {
                <tr>
                    <td>@show.Id</td>
                    <td>@show.Name</td>
                    <td>@show.Url</td>
                    <td>@show.Description</td>
                    <td>@show.ThumbnailUrl</td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(e => Edit(show))">Edit</button>
                        <button class="btn btn-primary" @onclick="@(e => DeleteAsync(show))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    

    <button class="btn btn-primary" @onclick="RefreshAsync">Refresh</button>

    <EditForm Model="@show" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>
            <label>
                Identifier:
            </label><br />
            <InputText id="id" @bind-Value="show.Id" />
        </p>
        <p>
            <label>
                Name:
            </label><br />
            <InputText id="name" @bind-Value="show.Name" />
        </p>
        <p>
            <label>
                Url:
            </label><br />
            <InputText id="url" @bind-Value="show.Url" />
        </p>
        <p>
            <label>
                Description:
            </label><br />
            <InputText id="description" @bind-Value="show.Description" />
        </p>
        <p>
            <label>
                ThumbnailUrl:
            </label><br />
            <InputText id="thumbnailUrl" @bind-Value="show.ThumbnailUrl" />
        </p>

        <button type="submit">Submit</button>
    </EditForm>
}

@code {
    private Show show;

    private async void HandleValidSubmit()
    {
        if (show.IsEditing)
        {
            await Http.PutAsJsonAsync($"api/Shows/{show.Id}", show);
            show.IsEditing = false;
        }
        else
        {
            await Http.PostAsJsonAsync("api/Show", show);
        }
        show = new Show();
        await RefreshAsync();
        Console.WriteLine("OnValidSubmit");
    }


    async Task DeleteAsync(Show deleteShow)
    {
        await Http.DeleteAsync($"api/Shows/{deleteShow.Id}");
        await RefreshAsync();
    }

    private void Edit(Show editShow)
    {
        show = editShow;
        show.IsEditing = true;
        StateHasChanged();
    }

    async Task RefreshAsync()
    {
        try
        {
            shows = await Http.GetFromJsonAsync<Show[]>("api/Shows");
            show = new Show();
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    private Show[] shows;

    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync();
    }
}
